language: cpp

cache: ccache


matrix:
  include:
  - os: linux
    env: BUILD_SYSTEM=qmake DEPLOY=1
  - os: linux
    env: BUILD_SYSTEM=cmake
  - os: osx
    osx_image: xcode10.1
    env: BUILD_SYSTEM=qmake DEPLOY=1
  - os: osx
    osx_image: xcode10.1
    env: BUILD_SYSTEM=cmake

sudo: required
dist: trusty

addons:
  apt:
    sources:
      - sourceline: "ppa:beineri/opt-qt596-trusty"
    packages:
      - qt59base
      - qt59svg
      - qt59webengine
  homebrew:
    update: true
    brewfile: scripts/Brewfile

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   export PATH="/usr/local/opt/qt/bin:$PATH" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   source scripts/prepare_python_macos.sh    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      source /opt/qt5*/bin/qt5*-env.sh
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then source scripts/prepare_python_linux.sh    ; fi

before_script:
  - git submodule init ; git submodule update
  - cd radare2
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        INSTALL_TARGET=install sys/install.sh;
    else
        LDFLAGS=-headerpad_max_install_names INSTALL_TARGET=install sys/install.sh;
    fi
  - cd ..

script:
  - mkdir build
  - cd build
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            PKG_CONFIG_PATH="$CUSTOM_PYTHON_PREFIX/lib/pkgconfig" qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false PREFIX=/usr APPIMAGE=1 ../src && make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false CUTTER_BUNDLE_R2_APPBUNDLE=true PYTHON_FRAMEWORK_DIR=$PYTHON_FRAMEWORK_DIR ../src &&
            make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    fi

after_success:
  - export CUTTER_VERSION=$(python ../scripts/get_version.py)
  - lrelease ../src/Cutter.pro
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      mkdir -p Cutter.app/Contents/Resources/translations &&
      cp ../src/translations/*.qm Cutter.app/Contents/Resources/translations/ &&
      macdeployqt Cutter.app -executable=Cutter.app/Contents/MacOS/Cutter -libpath="../Frameworks" &&
      macdeployqt Cutter.app -executable=Cutter.app/Contents/MacOS/Cutter -libpath="../Frameworks" &&
      "$TRAVIS_BUILD_DIR/scripts/appbundle_embed_python.sh" "$PYTHON_FRAMEWORK_DIR/Python.framework" Cutter.app Cutter.app/Contents/MacOS/Cutter &&
      mkdir -p Cutter.app/Contents/Resources/r2/share &&
      cp -a /usr/local/share/radare2 Cutter.app/Contents/Resources/r2/share/ &&
      mkdir image && cp -a Cutter.app image/ &&
      export VOL_NAME="Cutter v${CUTTER_VERSION}" &&
      export DMG_TMP_FILE="Cutter-v$CUTTER_VERSION-x64.macOS-tmp.dmg" &&
      export DMG_FILE="Cutter-v$CUTTER_VERSION-x64.macOS.dmg" &&
      export SIZE=`du -sh "image" | sed 's/\([0-9\.]*\)M\(.*\)/\1/'` &&
      export SIZE=`echo "${SIZE} + 10.0" | bc | awk '{print int($1+0.5)}'` &&
      hdiutil create -srcfolder image -volname "${VOL_NAME}" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size ${SIZE}M "$DMG_TMP_FILE" &&
      export DEVICE=$(hdiutil attach -readwrite -noverify "${DMG_TMP_FILE}" | egrep '^/dev/' | sed 1q | awk '{print $1}') &&
      sleep 2 &&
      ../scripts/prepare_package_ui_macos.sh "Cutter" "${PWD}/../src/macos/cutter_mac_app.png" "${VOL_NAME}" &&
      hdiutil detach "${DEVICE}" &&
      hdiutil convert "${DMG_TMP_FILE}" -format UDZO -imagekey zlib-level=9 -o "${DMG_FILE}" &&
      export FILE_TO_UPLOAD="$DMG_FILE"
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      make INSTALL_ROOT=appdir install &&
      cp -r /usr/share/radare2 appdir/usr/share/ &&
      mkdir -p appdir/usr/bin/translations &&
      cp ../src/translations/*.qm appdir/usr/bin/translations/ &&
      "$TRAVIS_BUILD_DIR/scripts/appimage_embed_python.sh" "$CUSTOM_PYTHON_PREFIX" appdir &&
      wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" &&
      chmod a+x linuxdeployqt*.AppImage &&
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq &&
      export APPIMAGE_FILE="Cutter-v$CUTTER_VERSION-x64.Linux.AppImage" &&
      mv Cutter-*-x86_64.AppImage "$APPIMAGE_FILE" &&
      export FILE_TO_UPLOAD="$APPIMAGE_FILE"
    ; fi
    
before_deploy:
- if [[ "$TRAVIS_TAG" == "" ]]; then  export TRAVIS_TAG=git-$GIT_TAG  ; fi

deploy:
  skip_cleanup: true
  provider: releases
  draft: false
  prerelease: true
  tag_name: $TRAVIS_TAG
  api_key:
    secure: y65mlRmR77Z+gh4hfvd/rpnDZTvQduJyJpxAXdrXYzRroO9TXBP+ZW1JHAfSSCZMiMRKUmuWA6N+7WR2+JysAvndfqGy1M4Nj2/6M/c1v8ZP+7cx5GjFKlGL4ONhqvVMaSJwLPQIFI1XPdULwYPd1NHgdw2C8yd7lPJAUjuGQRnXamCseaigbW+BzGjpkeCrSsUJGm4sG6/j2Urp+ksn63xMbd99pIlgZPRQJrK1y3Mn1jb5Hj725BVSUXU0deOxAO3PVxAxVJ1li57IBtdtmGNt5eKvvuppcnHwWv9j8LYm/Vm/ja4LjTEJvIvSsi9z/HP8IblgCca39ooHyyHVg0r4eCRh/+61HnQhl7RNw+JtrW1f5lmwElRnxizhw+W/bnJgPxgggAxC4jZtHZTNCExzr+pi8rULxvbDx43Jfdc7MkMizF7Vq4y+99o31gwZL96jfIF65/hW4rTiSBdCrQdTuAOQKW/Mg/5iPpVQgNdBaLNJCd0DIZVDwvHo8tIeL0+ep5GPCkbo57u/PznLnxIbmP+llw8RODQj7kcUZiL5oKjQrdlFUOuQ93WjsmDdfgiyza/+rGHoik8tP76EQVEjQRRQ0PPBJyWA0EzWOFHbXnI2NpGi05IX3aiBn2dYP/ywoFYTRIhAfAzK2ZShjP4NIIAleWtTTL3hzv87Sms=
  file:
    - "${FILE_TO_UPLOAD}"
  on:
    tags: true
    condition: $DEPLOY = 1

