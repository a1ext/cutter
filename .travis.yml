language: cpp

cache: ccache


matrix:
  include:
  - os: osx
    env: BUILD_SYSTEM=qmake DEPLOY=1

sudo: required
dist: trusty

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update          ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo add-apt-repository ppa:beineri/opt-qt596-trusty -y &&  
      sudo apt-get update -qq  
    ; fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   brew uninstall -f gdal postgis numpy geos libpq postgresql mercurial libspatialite ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   brew bundle --file=scripts/Brewfile -v    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   export PATH="/usr/local/opt/qt/bin:$PATH" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   source scripts/prepare_python_macos.sh    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get -y install qt59base qt59svg qt59webengine --allow-unauthenticated &&
      source /opt/qt5*/bin/qt5*-env.sh
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then source scripts/prepare_python_linux.sh    ; fi

before_script:
  - git submodule init ; git submodule update
  - cd radare2
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        INSTALL_TARGET=install sys/install.sh;
    else
        LDFLAGS=-headerpad_max_install_names INSTALL_TARGET=install sys/install.sh;
    fi
  - cd ..

script:
  - mkdir build
  - cd build
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            PKG_CONFIG_PATH="$CUSTOM_PYTHON_PREFIX/lib/pkgconfig" qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false PREFIX=/usr APPIMAGE=1 ../src && make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false CUTTER_BUNDLE_R2_APPBUNDLE=true PYTHON_FRAMEWORK_DIR=$PYTHON_FRAMEWORK_DIR ../src &&
            make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    fi

after_success:
  - export CUTTER_VERSION=$(python ../scripts/get_version.py)
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      macdeployqt Cutter.app -executable=Cutter.app/Contents/MacOS/Cutter -libpath="../Frameworks" &&
      "$TRAVIS_BUILD_DIR/scripts/appbundle_embed_python.sh" "$PYTHON_FRAMEWORK_DIR/Python.framework" Cutter.app Cutter.app/Contents/MacOS/Cutter &&
      mkdir -p Cutter.app/Contents/Resources/r2/share &&
      cp -a /usr/local/share/radare2 Cutter.app/Contents/Resources/r2/share/ &&
      mkdir image && cp -a Cutter.app image/ &&
      export DMG_FILE="Cutter-v$CUTTER_VERSION-x64.macOS.dmg" &&
      hdiutil create -srcfolder image -volname Cutter -fs HFS+ "$DMG_FILE" &&
      export FILE_TO_UPLOAD="$DMG_FILE"
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      make INSTALL_ROOT=appdir install &&
      cp -r /usr/share/radare2 appdir/usr/share/ &&
      "$TRAVIS_BUILD_DIR/scripts/appimage_embed_python.sh" "$CUSTOM_PYTHON_PREFIX" appdir &&
      wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" &&
      chmod a+x linuxdeployqt*.AppImage &&
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq &&
      export APPIMAGE_FILE="Cutter-v$CUTTER_VERSION-x64.Linux.AppImage" &&
      mv Cutter-x86_64.AppImage "$APPIMAGE_FILE" &&
      export FILE_TO_UPLOAD="$APPIMAGE_FILE"
    ; fi

before_deploy:
- if [[ "$TRAVIS_TAG" == "" ]]; then  export TRAVIS_TAG=git-$GIT_TAG  ; fi
    
deploy:
  skip_cleanup: true
  provider: releases
  draft: true
  tag_name: "$TRAVIS_TAG"
  api_key:
    secure: HdUIojN7zN6ksmQxYex7gSYX4q0vI/f7r06H5Ct4XABqW3rsmag2WHHCx4bk0v+kI6+eh0/JTfHsC6/FGlgerITUcZ0cezn0paicgrpxqDiPmOd7/AfZqIq8BUBIifWJs1lF84+4ORB6H77v6+BuWSgCrLumpGPKn6Ry9cGYbY4Me4g8mnIQhE328VYPUpcABTVC3BrszXBeNsPgHE6mXbf1iGIwxAQVgsXMWehPb5W7ET0Qa/XJWCLvhQoNRcbBW90yogDZiu3s1vkr1iG2K5fy1gOCJDHSbU8RZ0cnmLQPzFMFqeF6RYZ3LJzS1NwOvZomIfIh23jyfCzWL2t8UZjMpJEKpnQDj+v/3UdINDHKGV0oOZSWnNenLzez+Qy9+cEdL0I41SVIjDGrFEab+UHG/sihs/lQbMmN0ohtplqf+ZP24YyJRwtXSaR5l2wu+6H/u7AkI/CWSCxCCJx7fxkeSd9hI+SjOqNpBPgu29PJXI1O0IiVFq3Z4b6FlhLI7eDFx3fu3ZZ4BPs3pPX8lMCpXU3SqZ5ITFhOs3jy3f7zb7ieCq6caq56KNamnbC1CwfH4dCyo+Zp54uW19UXwuOweLDqdbOjZA5IymYzIPRWzvV060EppN6UP6j4D33Uj8jgVL6ctdePysH6EpUVbIJROnnQil9aggvDmoUl3Gk=
  file:
    - "${FILE_TO_UPLOAD}"
  on:
    tags: true
    condition: "$DEPLOY = 1"
    all_branches: true
