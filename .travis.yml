language: cpp

cache: ccache


matrix:
  include:
  - os: osx
    env: BUILD_SYSTEM=qmake DEPLOY=1

sudo: required
dist: trusty

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update          ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo add-apt-repository ppa:beineri/opt-qt596-trusty -y &&  
      sudo apt-get update -qq  
    ; fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   brew uninstall -f gdal postgis numpy geos libpq postgresql mercurial libspatialite ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   brew bundle --file=scripts/Brewfile -v    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   export PATH="/usr/local/opt/qt/bin:$PATH" ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then   source scripts/prepare_python_macos.sh    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get -y install qt59base qt59svg qt59webengine --allow-unauthenticated &&
      source /opt/qt5*/bin/qt5*-env.sh
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then source scripts/prepare_python_linux.sh    ; fi

before_script:
  - git submodule init ; git submodule update
  - cd radare2
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        INSTALL_TARGET=install sys/install.sh;
    else
        LDFLAGS=-headerpad_max_install_names INSTALL_TARGET=install sys/install.sh;
    fi
  - cd ..

script:
  - mkdir build
  - cd build
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            PKG_CONFIG_PATH="$CUSTOM_PYTHON_PREFIX/lib/pkgconfig" qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false PREFIX=/usr APPIMAGE=1 ../src && make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        if [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            qmake CUTTER_ENABLE_JUPYTER=true CUTTER_ENABLE_QTWEBENGINE=false CUTTER_BUNDLE_R2_APPBUNDLE=true PYTHON_FRAMEWORK_DIR=$PYTHON_FRAMEWORK_DIR ../src &&
            make -j4;
        elif [[ "$BUILD_SYSTEM" == "qmake" ]]; then
            cmake ../src && make -j4;
       fi
    fi

after_success:
  - export CUTTER_VERSION=$(python ../scripts/get_version.py)
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      macdeployqt Cutter.app -executable=Cutter.app/Contents/MacOS/Cutter -libpath="../Frameworks" &&
      macdeployqt Cutter.app -executable=Cutter.app/Contents/MacOS/Cutter -libpath="../Frameworks" &&
      "$TRAVIS_BUILD_DIR/scripts/appbundle_embed_python.sh" "$PYTHON_FRAMEWORK_DIR/Python.framework" Cutter.app Cutter.app/Contents/MacOS/Cutter &&
      mkdir -p Cutter.app/Contents/Resources/r2/share &&
      cp -a /usr/local/share/radare2 Cutter.app/Contents/Resources/r2/share/ &&
      mkdir image && cp -a Cutter.app image/ &&
      export VOL_NAME="Cutter v${CUTTER_VERSION}" &&
      export DMG_TMP_FILE="Cutter-v$CUTTER_VERSION-x64.macOS-tmp.dmg" &&
      export DMG_FILE="Cutter-v$CUTTER_VERSION-x64.macOS.dmg" &&
      export SIZE=`du -sh "image" | sed 's/\([0-9\.]*\)M\(.*\)/\1/'` &&
      export SIZE=`echo "${SIZE} + 10.0" | bc | awk '{print int($1+0.5)}'` &&
      hdiutil create -srcfolder image -volname "${VOL_NAME}" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -size ${SIZE}M "$DMG_TMP_FILE" &&
      export DEVICE=$(hdiutil attach -readwrite -noverify "${DMG_TMP_FILE}" | egrep '^/dev/' | sed 1q | awk '{print $1}') &&
      sleep 2 &&
      ../scripts/prepare_package_ui_macos.sh "Cutter" "${PWD}/../src/macos/cutter_mac_app.png" "${VOL_NAME}" &&
      hdiutil detach "${DEVICE}" &&
      hdiutil convert "${DMG_TMP_FILE}" -format UDZO -imagekey zlib-level=9 -o "${DMG_FILE}" &&
      export FILE_TO_UPLOAD="$DMG_FILE"
    ; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      make INSTALL_ROOT=appdir install &&
      cp -r /usr/share/radare2 appdir/usr/share/ &&
      "$TRAVIS_BUILD_DIR/scripts/appimage_embed_python.sh" "$CUSTOM_PYTHON_PREFIX" appdir &&
      wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" &&
      chmod a+x linuxdeployqt*.AppImage &&
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      LD_LIBRARY_PATH=$CUSTOM_PYTHON_PREFIX/lib ./linuxdeployqt*.AppImage ./appdir/usr/share/applications/*.desktop -appimage -no-strip -exclude-libs=libnss3.so,libnssutil3.so -ignore-glob=usr/lib/python3.6/** -verbose=2 &&
      find ./appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq &&
      export APPIMAGE_FILE="Cutter-v$CUTTER_VERSION-x64.Linux.AppImage" &&
      mv Cutter-x86_64.AppImage "$APPIMAGE_FILE" &&
      export FILE_TO_UPLOAD="$APPIMAGE_FILE"
    ; fi

before_deploy:
- if [[ "$TRAVIS_TAG" == "" ]]; then  export TRAVIS_TAG=git-$GIT_TAG  ; fi
deploy:
  skip_cleanup: true
  provider: releases
  draft: false
  prerelease: true
  tag_name: "$TRAVIS_TAG"
  api_key:
    secure: re6qDfPtaKqEBPyR1rTnIQa17H962pvsG+aFOLqV01lW3rMvBm/wmxyKDOPG/UpZhFz2n6HEnDzOqLJpRBArgljWOeuvgq0KhMu6SehxhG6luTi7bh8aqvFQ64QjLXWOlcaaXQF6brN3/+n+bsN1tNLACI6MUHLp3zeXfwfvA21DjwyKWpPtGjrzU9OLqikOXbmEUe7DqXJ+nDW/t6kKTXqG9DjS5hZqQyDRYsP/ThCNQ5VdXIDz1J6eI+F8XxNcknw0+vRirp0Kv9anSBctpQpwlrKHVWNRO7QKseCKUWpnHFB+EuE8F/WZwTZQaabs6sN1gDK7+p/o7bbEmdNBRxvvckiVQIoGJsIIPe0MWv0u+cQbyZNvUB4cuBigBqt5KObe1B3j0ZcVf3VVvCUwUyB63jJvTm3HyeEQjPLYL8eU24YL5kjuo1Kg6IAa0hiqpTwy4DO6DIJ533fGmDfQMnFZNaOUh3EdKCxOGYmnr/pT2k9BkJHRu5fI2NLfeoXYpqmXqz3sxwMVOcwUaBBSoOzbx34d1vR/yqyc3cPJG6wzZZf4M9U0zHKOw7UoTWLtAvqcYC41epBJk1ujMkOD7alYLm5bRLUXrpTvC1/763PDzwnYZJKxl2TQJ9Y7YC3pKw2bR5qEgx6maHpcJ1GAwdWH/AoEX3L3l78ElwopR3U=
  file: "$FILE_TO_UPLOAD"
  on:
    condition: "$DEPLOY = 1"
    all_branches: true